{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 6 â€” K-Nearest Neighbors (KNN) Classification (Heart Disease Dataset)\n",
    "\n",
    "**Objective:**\n",
    "- Train a KNN classifier on the heart disease dataset\n",
    "- Experiment with different values of K\n",
    "- Evaluate accuracy & confusion matrix\n",
    "- Visualize accuracy trend and decision boundaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, glob\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Locate heart.csv\n",
    "candidates = glob.glob('**/heart*.csv', recursive=True)\n",
    "print(\"CSV candidates:\", candidates)\n",
    "csv_path = candidates[0] if candidates else 'heart.csv'\n",
    "\n",
    "df = pd.read_csv(csv_path)\n",
    "print(\"Shape:\", df.shape)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(df.isna().sum())\n",
    "print(\"Target distribution:\\n\", df['target'].value_counts())\n",
    "\n",
    "y = df['target'].astype(int)\n",
    "X = df.drop(columns=['target'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Train/test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
    "\n",
    "# Normalize features (important for KNN)\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Try different K values\n",
    "k_values = range(1, 21)\n",
    "acc_scores = []\n",
    "\n",
    "for k in k_values:\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn.fit(X_train_scaled, y_train)\n",
    "    y_pred = knn.predict(X_test_scaled)\n",
    "    acc_scores.append(accuracy_score(y_test, y_pred))\n",
    "\n",
    "plt.plot(k_values, acc_scores, marker='o')\n",
    "plt.xlabel('K (neighbors)')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('KNN Accuracy vs K')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Best K\n",
    "best_k = k_values[np.argmax(acc_scores)]\n",
    "print(\"Best K:\", best_k, \"with accuracy:\", max(acc_scores))\n",
    "\n",
    "best_knn = KNeighborsClassifier(n_neighbors=best_k)\n",
    "best_knn.fit(X_train_scaled, y_train)\n",
    "y_pred_best = best_knn.predict(X_test_scaled)\n",
    "\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred_best))\n",
    "print(\"\\nReport:\\n\", classification_report(y_test, y_pred_best, digits=4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualize decision boundary in 2D (via PCA)\n",
    "pca = PCA(n_components=2)\n",
    "X_train_2d = pca.fit_transform(X_train_scaled)\n",
    "X_test_2d = pca.transform(X_test_scaled)\n",
    "\n",
    "knn_2d = KNeighborsClassifier(n_neighbors=best_k)\n",
    "knn_2d.fit(X_train_2d, y_train)\n",
    "\n",
    "# Mesh grid for decision surface\n",
    "x_min, x_max = X_train_2d[:,0].min()-1, X_train_2d[:,0].max()+1\n",
    "y_min, y_max = X_train_2d[:,1].min()-1, X_train_2d[:,1].max()+1\n",
    "xx, yy = np.meshgrid(np.linspace(x_min, x_max, 200), np.linspace(y_min, y_max, 200))\n",
    "Z = knn_2d.predict(np.c_[xx.ravel(), yy.ravel()])\n",
    "Z = Z.reshape(xx.shape)\n",
    "\n",
    "plt.contourf(xx, yy, Z, alpha=0.3)\n",
    "plt.scatter(X_train_2d[:,0], X_train_2d[:,1], c=y_train, marker='o', label='Train')\n",
    "plt.scatter(X_test_2d[:,0], X_test_2d[:,1], c=y_test, marker='x', label='Test')\n",
    "plt.legend()\n",
    "plt.title('KNN Decision Boundary (PCA projection)')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
